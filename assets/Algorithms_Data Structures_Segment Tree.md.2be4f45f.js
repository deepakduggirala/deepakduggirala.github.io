import{_ as s,c as n,o as a,a as l}from"./app.5f69941c.js";const i='{"title":"Segment Tree","description":"","frontmatter":{},"headers":[{"level":3,"title":"Data Structure Implementation","slug":"data-structure-implementation"},{"level":3,"title":"Usage","slug":"usage"}],"relativePath":"Algorithms/Data Structures/Segment Tree.md"}',p={name:"Algorithms/Data Structures/Segment Tree.md"},o=l(`<h1 id="segment-tree" tabindex="-1">Segment Tree <a class="header-anchor" href="#segment-tree" aria-hidden="true">#</a></h1><p>20200906132142</p><p><a href="https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/" target="_blank" rel="noopener noreferrer">https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/</a></p><p><a href="https://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/" target="_blank" rel="noopener noreferrer">https://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/</a></p><p>Segment Tree only makes sense when the queries and updates are large, since each query or update takes O(logn)</p><ul><li><p>Queries based on a range given an array</p><ul><li>Reduce the given range <ul><li>Minimum / Maximum / Sum / XOR / LCM / GCD</li><li>sum of set bits of all elements in the given range <ul><li><code>Segment_tree([sum_of_digits(i, base=2) for i in [1, 3, 5, 7, 9, 11]], lambda x,y: x+y)</code></li></ul></li></ul></li><li>number of elements greater than k in the given range <ul><li><code>Segment_tree([1 if i&gt;k else 0 for i in [1, 3, 5, 7, 9, 11]], lambda x,y: x+y)</code></li></ul></li><li>greatest sum of two elements in the given range <ul><li><code>Segment_tree([[i] for i in [1, 3, 5, 7, 9, 11]], lambda x,y: sorted([*x, *y], reverse=True)[:2])</code><ul><li>this gives the 1st and 2nd maximum in the given range, modify query to return this sum and handle single element lists.</li></ul></li></ul></li><li>number of elements such that sum of whose digits is even in the given range <ul><li><code>Segment_tree([1 if sum_of_digits(i)%2==0 else 0 for i in [1, 3, 5, 7, 9, 11]], lambda x,y: x+y)</code></li></ul></li><li>find kth greatest element in the given range <ul><li><code>Segment_tree([[i] for i in [1, 3, 5, 7, 9, 11]], lambda x,y: sorted([*x, *y], reverse=True)[:k])</code><ul><li>return the last element of the result of the query function</li></ul></li></ul></li></ul></li><li><p>Query along with update</p></li><li><p>Find the range with a given property</p><ul><li>smallest sub-array with given GCD</li><li></li></ul></li></ul><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum_of_digits</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> base</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">base</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">base </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum_of_digits</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">//</span><span style="color:#82AAFF;">base</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> base</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="data-structure-implementation" tabindex="-1">Data Structure Implementation <a class="header-anchor" href="#data-structure-implementation" aria-hidden="true">#</a></h3><p>This segment tree works on all binary operations which are closed and is associative</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">f: SxS -&gt; S (closed means the result is in the same set as the domain)</span></span>
<span class="line"><span style="color:#A6ACCD;">f(a, f(b,c)) = f((a,b), c)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Examples:</p><ul><li>addition</li><li>subtraction</li><li>multiplication</li><li>division</li><li>maximum</li><li>minimum</li><li>vector addition, dot product</li><li>matrix addition, product</li><li>bitwise operations <ul><li>and</li><li>or</li><li>xor</li></ul></li></ul><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Segment_tree</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> merge</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">arr</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> merge</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">height_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ceil</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">)))</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">capacity_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">height_</span><span style="color:#89DDFF;">))-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]*</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">capacity_</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">make_segment_tree</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_segment_tree</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> start_i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> end_i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> start_i </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> end_i</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">start_i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            mid_i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> start_i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">end_i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> start_i</span><span style="color:#89DDFF;">)//</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">            l_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">            r_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">            l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">make_segment_tree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">start_i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> mid_i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> l_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">make_segment_tree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">mid_i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> end_i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">l</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qe</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> qe </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> qe</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query_</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ss</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> se</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        qs: query start index</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        qe: query end index</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        0 &lt;= qs &lt;= qe &lt; n - this is verified</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        ss: segment start index of the current tree</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        se: segment end index of the current tree</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        st_root: index of the current tree</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        </span><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># if the given interval is bigger than and overlaps with the current segment tree range (  qs ss se qe  )</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> qe </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> se</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># range of the current tree and query interval are disjoint (  qs qe ss se, ss se qs qe  )</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> qe </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> se</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># part of the query interval overlaps with the current tree&#39;s range (  ss qs se qe, qs ss qe se  )</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># or</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># current tree range is bigger than and overlaps with the query interval (  ss qs qe se  )</span></span>
<span class="line"><span style="color:#A6ACCD;">        mid_i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">se </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> ss</span><span style="color:#89DDFF;">)//</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        l_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        r_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        l_val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> ss</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> mid_i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> l_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        r_val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> mid_i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> se</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> l_val </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> r_val</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> r_val </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> l_val</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">l_val</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r_val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> new_val</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> new_val</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">update_</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ss</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> se</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> ss</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> se</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> st_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># range of the current tree and query interval are disjoint (  qs qe ss se, ss se qs qe  )</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> qe </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> se</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> qs</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">ss </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> qe</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">se</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">ss</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        mid_i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">se </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> ss</span><span style="color:#89DDFF;">)//</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        l_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        r_root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> st_root</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        l_val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> ss</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> mid_i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> l_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        r_val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update_</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">qs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> qe</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> mid_i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> se</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r_root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">l_val</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> r_val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">st</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">st_root</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">st </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Segment_tree</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> max</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 5 </span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 13</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">st </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Segment_tree</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 4 </span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 14</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">st </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Segment_tree</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ef</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ij</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#    &#39;efghijkl&#39;</span></span>
<span class="line"></span></code></pre></div>`,15),e=[o];function t(r,c,F,D,y,A){return a(),n("div",null,e)}var f=s(p,[["render",t]]);export{i as __pageData,f as default};
