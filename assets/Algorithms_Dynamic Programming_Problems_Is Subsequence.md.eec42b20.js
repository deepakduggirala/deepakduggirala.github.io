import{_ as s,c as n,o as a,a as l}from"./app.5f69941c.js";const A='{"title":"Is Subsequence","description":"","frontmatter":{},"headers":[{"level":3,"title":"Iterative Solution","slug":"iterative-solution"},{"level":3,"title":"Mistakes I did","slug":"mistakes-i-did"},{"level":3,"title":"How would you solve this if there are 1 Billion subsequences and need to check against a single t?","slug":"how-would-you-solve-this-if-there-are-1-billion-subsequences-and-need-to-check-against-a-single-t"}],"relativePath":"Algorithms/Dynamic Programming/Problems/Is Subsequence.md"}',o={name:"Algorithms/Dynamic Programming/Problems/Is Subsequence.md"},e=l(`<h1 id="is-subsequence" tabindex="-1">Is Subsequence <a class="header-anchor" href="#is-subsequence" aria-hidden="true">#</a></h1><p>20200903194906</p><p>Given a String s and t, determine is s is a subsequence of t.</p><p>A subsequence of String can be formed by delting some (may be none) of the characters. The order of the characters remain the same.</p><p>How would you solve this if there are 1 Billion subsequences and need to check against a single t?</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">if s_0 is in t at i and if s[1..] is a subsequence t[i+1..] then s is a subsequence of t</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">    i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">!=-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:],</span><span style="color:#82AAFF;"> t</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ahgbqwcty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#True</span></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">qwahgb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#False</span></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ahgbqwctyahgbqwcty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#True</span></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aabbcc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ahgbqwctyahgbqwcty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#False</span></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcabc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ahgbqwctyahgbqwcty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#True</span></span>
<span class="line"><span style="color:#82AAFF;">is_subsequence</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">axbyz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ahgbqwctyahgbqwcty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#False</span></span>
<span class="line"></span></code></pre></div><p>Complexity is O(n+m) where n = len(s) and m = len(t). because each element is looked at atmost once.</p><h3 id="iterative-solution" tabindex="-1">Iterative Solution <a class="header-anchor" href="#iterative-solution" aria-hidden="true">#</a></h3><div class="language-python"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">is_subsequence_flag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    idx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">:].</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">j</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">idx</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> idx</span><span style="color:#89DDFF;">!=-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        i</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        j</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">t</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            is_subsequence_flag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        is_subsequence_flag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> is_subsequence_flag</span></span>
<span class="line"></span></code></pre></div><h3 id="mistakes-i-did" tabindex="-1">Mistakes I did <a class="header-anchor" href="#mistakes-i-did" aria-hidden="true">#</a></h3><ul><li><code>t[j:].find(s[i])</code> gives the index relative to j, and to update j need to use <code>j = j + idx + 1</code> instead of <code>j = idx + 1</code></li><li>While checking the loop terminating condition <code>j &gt;= len(t)</code> I missed the edge case where <code>i==len(s)</code>. In this case subsequence is consumed at the same time j goes over the limit.</li></ul><h3 id="how-would-you-solve-this-if-there-are-1-billion-subsequences-and-need-to-check-against-a-single-t" tabindex="-1">How would you solve this if there are 1 Billion subsequences and need to check against a single t? <a class="header-anchor" href="#how-would-you-solve-this-if-there-are-1-billion-subsequences-and-need-to-check-against-a-single-t" aria-hidden="true">#</a></h3><p>i don&#39;t know!!!! \u{1F626}</p><ul><li>Need to index t to find out the indices by lookup in constant time</li><li><code>t[j:].find(s[i])</code> can be rewritten as <code>index of s[i] from j</code></li></ul><table><thead><tr><th></th><th>a</th><th>h</th><th>g</th><th>b</th><th>a</th><th>c</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>1</td><td>-1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>2</td><td>-1</td><td>-1</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>3</td><td>-1</td><td>-1</td><td>-1</td><td>0</td><td>1</td><td>2</td></tr><tr><td>4</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>0</td><td>1</td></tr><tr><td>5</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>0</td></tr></tbody></table>`,16),t=[e];function p(c,r,F,D,y,i){return a(),n("div",null,t)}var C=s(o,[["render",p]]);export{A as __pageData,C as default};
